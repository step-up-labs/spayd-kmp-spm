// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -O -module-name shared
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import shared
public enum Skie {
  public enum RuntimeKotlin {
    public enum SkieColdFlowIterator {
      public typealias __Kotlin = shared.SkieColdFlowIterator
    }
    public enum SkieKotlinFlow {
      public typealias __Kotlin = shared.SkieKotlinFlow
    }
    public enum SkieKotlinMutableSharedFlow {
      public typealias __Kotlin = shared.SkieKotlinMutableSharedFlow
    }
    public enum SkieKotlinMutableStateFlow {
      public typealias __Kotlin = shared.SkieKotlinMutableStateFlow
    }
    public enum SkieKotlinOptionalFlow {
      public typealias __Kotlin = shared.SkieKotlinOptionalFlow
    }
    public enum SkieKotlinOptionalMutableSharedFlow {
      public typealias __Kotlin = shared.SkieKotlinOptionalMutableSharedFlow
    }
    public enum SkieKotlinOptionalMutableStateFlow {
      public typealias __Kotlin = shared.SkieKotlinOptionalMutableStateFlow
    }
    public enum SkieKotlinOptionalSharedFlow {
      public typealias __Kotlin = shared.SkieKotlinOptionalSharedFlow
    }
    public enum SkieKotlinOptionalStateFlow {
      public typealias __Kotlin = shared.SkieKotlinOptionalStateFlow
    }
    public enum SkieKotlinSharedFlow {
      public typealias __Kotlin = shared.SkieKotlinSharedFlow
    }
    public enum SkieKotlinStateFlow {
      public typealias __Kotlin = shared.SkieKotlinStateFlow
    }
    public enum Skie_CancellationHandler {
      public typealias __Kotlin = shared.Skie_CancellationHandler
    }
    public enum Skie_DispatcherDelegate {
      public typealias __Kotlin = shared.Skie_DispatcherDelegate
    }
    public enum Skie_SuspendHandler {
      public typealias __Kotlin = shared.Skie_SuspendHandler
    }
    public enum Skie_SuspendResult {
      public typealias __Kotlin = shared.Skie_SuspendResult
      public enum Success {
        public typealias __Kotlin = shared.Skie_SuspendResult.Success
      }
      public enum Error {
        public typealias __Kotlin = shared.Skie_SuspendResult.Error
      }
      public enum Canceled {
        public typealias __Kotlin = shared.Skie_SuspendResult.Canceled
      }
    }
  }
  public typealias co_touchlab_skie__runtime_kotlin = shared.Skie.RuntimeKotlin
  public enum KotlinxCoroutinesCore {
    public enum Flow {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreFlow
    }
    public enum StateFlow {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreStateFlow
    }
    public enum SharedFlow {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreSharedFlow
    }
    public enum MutableSharedFlow {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreMutableSharedFlow
    }
    public enum MutableStateFlow {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreMutableStateFlow
    }
    public enum Runnable {
      public typealias __Kotlin = shared.Kotlinx_coroutines_coreRunnable
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_coroutines_core = shared.Skie.KotlinxCoroutinesCore
  public enum KotlinxDatetime {
    public enum DateTimeFormat {
    }
    public enum DateTimeFormatBuilder {
      public enum WithDate {
      }
      public enum WithDateTime {
      }
      public enum WithTime {
      }
      public enum WithDateTimeComponents {
      }
      public enum WithUtcOffset {
      }
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_datetime = shared.Skie.KotlinxDatetime
  public enum KotlinxSerializationCore {
    public enum SerialKind {
    }
    public enum SerializersModule {
    }
    public enum PolymorphicKind {
    }
    public enum PrimitiveKind {
    }
    public enum StructureKind {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_core = shared.Skie.KotlinxSerializationCore
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func next() async -> T?
  #endif
  @objc deinit
  public typealias Element = T
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
#if $PrimaryAssociatedTypes2
public protocol SkieSwiftFlowProtocol<Element> : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : shared.Kotlinx_coroutines_coreFlow
}
#else
public protocol SkieSwiftFlowProtocol : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : shared.Kotlinx_coroutines_coreFlow
}
#endif
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinFlow<Swift.AnyObject>, result: inout shared.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinFlow<Swift.AnyObject>, result: inout shared.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinFlow<Swift.AnyObject>
  public typealias Delegate = any shared.Kotlinx_coroutines_coreFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalFlow<Swift.AnyObject>
  public typealias Delegate = any shared.Kotlinx_coroutines_coreFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinSharedFlow<Swift.AnyObject>
  public typealias Delegate = any shared.Kotlinx_coroutines_coreSharedFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  public typealias Delegate = any shared.Kotlinx_coroutines_coreSharedFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any shared.Kotlinx_coroutines_coreMutableSharedFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any shared.Kotlinx_coroutines_coreMutableSharedFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
  }
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinStateFlow<Swift.AnyObject>
  public typealias Delegate = any shared.Kotlinx_coroutines_coreStateFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  public typealias Delegate = any shared.Kotlinx_coroutines_coreStateFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
    set(value)
  }
  final public var replayCache: [T] {
    get
  }
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any shared.Kotlinx_coroutines_coreMutableStateFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : shared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
    set(value)
  }
  final public var replayCache: [T?] {
    get
  }
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout shared.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any shared.Kotlinx_coroutines_coreMutableStateFlow
  @objc deinit
}
#endif
extension shared.Skie.RuntimeKotlin.SkieColdFlowIterator {
  public struct __Suspend<E> where E : AnyObject {
    public let __kotlinObject: shared.SkieColdFlowIterator<E>
    public init(_ __kotlinObject: shared.SkieColdFlowIterator<E>)
  }
}
public func skie<E>(_ kotlinObject: shared.SkieColdFlowIterator<E>) -> shared.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend<E> where E : AnyObject
extension shared.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasNext() async throws -> shared.KotlinBoolean
  #endif
}
extension shared.Kotlinx_coroutines_coreFlow {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any shared.Kotlinx_coroutines_coreFlowCollector) async throws
  #endif
}
extension shared.Kotlinx_coroutines_coreFlowCollector {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
@frozen public enum Key : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case date
  case currency
  case amount
  case account
  case alternateAccounts
  case senderReference
  case recipientName
  case paymentType
  case message
  case notifyType
  case notifyAddress
  case `repeat`
  case variableSymbol
  case specificSymbol
  case constantSymbol
  case identifier
  case url
  public var key: Swift.String {
    get
  }
  public var maxLength: shared.KotlinInt? {
    get
  }
  public var maxValue: shared.KotlinDouble? {
    get
  }
  public var minLength: shared.KotlinInt? {
    get
  }
  public var minValue: shared.KotlinDouble? {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var type: any shared.KotlinKClass {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Key, result: inout shared.Key?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Key, result: inout shared.Key?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Key?) -> shared.Key
  public func _bridgeToObjectiveC() -> shared.__Key
  public typealias _ObjectiveCType = shared.__Key
  public static func == (a: shared.Key, b: shared.Key) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.Key]
  public static var allCases: [shared.Key] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.Key {
  public func toKotlinEnum() -> shared.__Key
}
extension shared.__Key {
  public func toSwiftEnum() -> shared.Key
}
@frozen public enum NotificationType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case email
  case phone
  public var key: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__NotificationType, result: inout shared.NotificationType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__NotificationType, result: inout shared.NotificationType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__NotificationType?) -> shared.NotificationType
  public func _bridgeToObjectiveC() -> shared.__NotificationType
  public typealias _ObjectiveCType = shared.__NotificationType
  public static func == (a: shared.NotificationType, b: shared.NotificationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.NotificationType]
  public static var allCases: [shared.NotificationType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.NotificationType {
  public func toKotlinEnum() -> shared.__NotificationType
}
extension shared.__NotificationType {
  public func toSwiftEnum() -> shared.NotificationType
}
@frozen public enum Kotlinx_datetimeMonth : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case january
  case february
  case march
  case april
  case may
  case june
  case july
  case august
  case september
  case october
  case november
  case december
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Kotlinx_datetimeMonth, result: inout shared.Kotlinx_datetimeMonth?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Kotlinx_datetimeMonth, result: inout shared.Kotlinx_datetimeMonth?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Kotlinx_datetimeMonth?) -> shared.Kotlinx_datetimeMonth
  public func _bridgeToObjectiveC() -> shared.__Kotlinx_datetimeMonth
  public typealias _ObjectiveCType = shared.__Kotlinx_datetimeMonth
  public static func == (a: shared.Kotlinx_datetimeMonth, b: shared.Kotlinx_datetimeMonth) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.Kotlinx_datetimeMonth]
  public static var allCases: [shared.Kotlinx_datetimeMonth] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.Kotlinx_datetimeMonth {
  public func toKotlinEnum() -> shared.__Kotlinx_datetimeMonth
}
extension shared.__Kotlinx_datetimeMonth {
  public func toSwiftEnum() -> shared.Kotlinx_datetimeMonth
}
@frozen public enum Kotlinx_datetimeDayOfWeek : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case monday
  case tuesday
  case wednesday
  case thursday
  case friday
  case saturday
  case sunday
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Kotlinx_datetimeDayOfWeek, result: inout shared.Kotlinx_datetimeDayOfWeek?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Kotlinx_datetimeDayOfWeek, result: inout shared.Kotlinx_datetimeDayOfWeek?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Kotlinx_datetimeDayOfWeek?) -> shared.Kotlinx_datetimeDayOfWeek
  public func _bridgeToObjectiveC() -> shared.__Kotlinx_datetimeDayOfWeek
  public typealias _ObjectiveCType = shared.__Kotlinx_datetimeDayOfWeek
  public static func == (a: shared.Kotlinx_datetimeDayOfWeek, b: shared.Kotlinx_datetimeDayOfWeek) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.Kotlinx_datetimeDayOfWeek]
  public static var allCases: [shared.Kotlinx_datetimeDayOfWeek] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.Kotlinx_datetimeDayOfWeek {
  public func toKotlinEnum() -> shared.__Kotlinx_datetimeDayOfWeek
}
extension shared.__Kotlinx_datetimeDayOfWeek {
  public func toSwiftEnum() -> shared.Kotlinx_datetimeDayOfWeek
}
@frozen public enum Kotlinx_datetimePadding : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case none
  case zero
  case space
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Kotlinx_datetimePadding, result: inout shared.Kotlinx_datetimePadding?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Kotlinx_datetimePadding, result: inout shared.Kotlinx_datetimePadding?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Kotlinx_datetimePadding?) -> shared.Kotlinx_datetimePadding
  public func _bridgeToObjectiveC() -> shared.__Kotlinx_datetimePadding
  public typealias _ObjectiveCType = shared.__Kotlinx_datetimePadding
  public static func == (a: shared.Kotlinx_datetimePadding, b: shared.Kotlinx_datetimePadding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [shared.Kotlinx_datetimePadding]
  public static var allCases: [shared.Kotlinx_datetimePadding] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension shared.Kotlinx_datetimePadding {
  public func toKotlinEnum() -> shared.__Kotlinx_datetimePadding
}
extension shared.__Kotlinx_datetimePadding {
  public func toSwiftEnum() -> shared.Kotlinx_datetimePadding
}
extension shared.Skie.RuntimeKotlin.Skie_SuspendResult {
  @frozen public enum __Sealed : Swift.Hashable {
    case canceled(shared.Skie_SuspendResult.Canceled)
    case error(shared.Skie_SuspendResult.Error)
    case success(shared.Skie_SuspendResult.Success)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed, b: shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed where __Sealed : shared.Skie_SuspendResult
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed? where __Sealed : shared.Skie_SuspendResult
extension shared.Skie.KotlinxDatetime.DateTimeFormat {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: shared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed, b: shared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed where __Sealed : shared.Kotlinx_datetimeDateTimeFormat
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed? where __Sealed : shared.Kotlinx_datetimeDateTimeFormat
extension shared.Skie.KotlinxDatetime.DateTimeFormatBuilder {
  @frozen public enum __Sealed {
    case withDate(any shared.Kotlinx_datetimeDateTimeFormatBuilderWithDate)
    case withTime(any shared.Kotlinx_datetimeDateTimeFormatBuilderWithTime)
    case withUtcOffset(any shared.Kotlinx_datetimeDateTimeFormatBuilderWithUtcOffset)
    case `else`
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.__Sealed where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilder
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.__Sealed? where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilder
extension shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDate {
  @frozen public enum __Sealed {
    case withDateTime(any shared.Kotlinx_datetimeDateTimeFormatBuilderWithDateTime)
    case `else`
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDate.__Sealed where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilderWithDate
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDate.__Sealed? where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilderWithDate
extension shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTime {
  @frozen public enum __Sealed {
    case withDateTimeComponents(any shared.Kotlinx_datetimeDateTimeFormatBuilderWithDateTimeComponents)
    case `else`
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTime.__Sealed where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilderWithDateTime
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTime.__Sealed? where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilderWithDateTime
extension shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithTime {
  @frozen public enum __Sealed {
    case withDateTime(any shared.Kotlinx_datetimeDateTimeFormatBuilderWithDateTime)
    case `else`
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithTime.__Sealed where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilderWithTime
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithTime.__Sealed? where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilderWithTime
extension shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents.__Sealed, b: shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents.__Sealed where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilderWithDateTimeComponents
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents.__Sealed? where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilderWithDateTimeComponents
extension shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithUtcOffset {
  @frozen public enum __Sealed {
    case withDateTimeComponents(any shared.Kotlinx_datetimeDateTimeFormatBuilderWithDateTimeComponents)
    case `else`
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithUtcOffset.__Sealed where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilderWithUtcOffset
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithUtcOffset.__Sealed? where __Sealed : shared.Kotlinx_datetimeDateTimeFormatBuilderWithUtcOffset
extension shared.Skie.KotlinxSerializationCore.SerialKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case polymorphicKind(shared.Kotlinx_serialization_corePolymorphicKind)
    case primitiveKind(shared.Kotlinx_serialization_corePrimitiveKind)
    case cONTEXTUAL(shared.Kotlinx_serialization_coreSerialKind.CONTEXTUAL)
    case eNUM(shared.Kotlinx_serialization_coreSerialKind.ENUM)
    case structureKind(shared.Kotlinx_serialization_coreStructureKind)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed, b: shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed where __Sealed : shared.Kotlinx_serialization_coreSerialKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxSerializationCore.SerialKind.__Sealed? where __Sealed : shared.Kotlinx_serialization_coreSerialKind
extension shared.Skie.KotlinxSerializationCore.SerializersModule {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed, b: shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed where __Sealed : shared.Kotlinx_serialization_coreSerializersModule
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed? where __Sealed : shared.Kotlinx_serialization_coreSerializersModule
extension shared.Skie.KotlinxSerializationCore.PolymorphicKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case oPEN(shared.Kotlinx_serialization_corePolymorphicKind.OPEN)
    case sEALED(shared.Kotlinx_serialization_corePolymorphicKind.SEALED)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed, b: shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed where __Sealed : shared.Kotlinx_serialization_corePolymorphicKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed? where __Sealed : shared.Kotlinx_serialization_corePolymorphicKind
extension shared.Skie.KotlinxSerializationCore.PrimitiveKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case bOOLEAN(shared.Kotlinx_serialization_corePrimitiveKind.BOOLEAN)
    case bYTE(shared.Kotlinx_serialization_corePrimitiveKind.BYTE)
    case cHAR(shared.Kotlinx_serialization_corePrimitiveKind.CHAR)
    case dOUBLE(shared.Kotlinx_serialization_corePrimitiveKind.DOUBLE)
    case fLOAT(shared.Kotlinx_serialization_corePrimitiveKind.FLOAT)
    case iNT(shared.Kotlinx_serialization_corePrimitiveKind.INT)
    case lONG(shared.Kotlinx_serialization_corePrimitiveKind.LONG)
    case sHORT(shared.Kotlinx_serialization_corePrimitiveKind.SHORT)
    case sTRING(shared.Kotlinx_serialization_corePrimitiveKind.STRING)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed, b: shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed where __Sealed : shared.Kotlinx_serialization_corePrimitiveKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed? where __Sealed : shared.Kotlinx_serialization_corePrimitiveKind
extension shared.Skie.KotlinxSerializationCore.StructureKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case cLASS(shared.Kotlinx_serialization_coreStructureKind.CLASS)
    case lIST(shared.Kotlinx_serialization_coreStructureKind.LIST)
    case mAP(shared.Kotlinx_serialization_coreStructureKind.MAP)
    case oBJECT(shared.Kotlinx_serialization_coreStructureKind.OBJECT)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed, b: shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed where __Sealed : shared.Kotlinx_serialization_coreStructureKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> shared.Skie.KotlinxSerializationCore.StructureKind.__Sealed? where __Sealed : shared.Kotlinx_serialization_coreStructureKind
extension shared.Key : Swift.Sendable {}
extension shared.NotificationType : Swift.Sendable {}
extension shared.Kotlinx_datetimeMonth : Swift.Sendable {}
extension shared.Kotlinx_datetimeDayOfWeek : Swift.Sendable {}
extension shared.Kotlinx_datetimePadding : Swift.Sendable {}
extension shared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed : Swift.Sendable {}
extension shared.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents.__Sealed : Swift.Sendable {}
extension shared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.Sendable {}
