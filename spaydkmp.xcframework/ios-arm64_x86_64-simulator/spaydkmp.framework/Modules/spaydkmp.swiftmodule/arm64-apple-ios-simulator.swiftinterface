// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -O -module-name spaydkmp
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import spaydkmp
public enum Skie {
  public enum RuntimeKotlin {
    public enum SkieColdFlowIterator {
      public typealias __Kotlin = spaydkmp.SkieColdFlowIterator
    }
    public enum SkieKotlinFlow {
      public typealias __Kotlin = spaydkmp.SkieKotlinFlow
    }
    public enum SkieKotlinMutableSharedFlow {
      public typealias __Kotlin = spaydkmp.SkieKotlinMutableSharedFlow
    }
    public enum SkieKotlinMutableStateFlow {
      public typealias __Kotlin = spaydkmp.SkieKotlinMutableStateFlow
    }
    public enum SkieKotlinOptionalFlow {
      public typealias __Kotlin = spaydkmp.SkieKotlinOptionalFlow
    }
    public enum SkieKotlinOptionalMutableSharedFlow {
      public typealias __Kotlin = spaydkmp.SkieKotlinOptionalMutableSharedFlow
    }
    public enum SkieKotlinOptionalMutableStateFlow {
      public typealias __Kotlin = spaydkmp.SkieKotlinOptionalMutableStateFlow
    }
    public enum SkieKotlinOptionalSharedFlow {
      public typealias __Kotlin = spaydkmp.SkieKotlinOptionalSharedFlow
    }
    public enum SkieKotlinOptionalStateFlow {
      public typealias __Kotlin = spaydkmp.SkieKotlinOptionalStateFlow
    }
    public enum SkieKotlinSharedFlow {
      public typealias __Kotlin = spaydkmp.SkieKotlinSharedFlow
    }
    public enum SkieKotlinStateFlow {
      public typealias __Kotlin = spaydkmp.SkieKotlinStateFlow
    }
    public enum Skie_CancellationHandler {
      public typealias __Kotlin = spaydkmp.Skie_CancellationHandler
    }
    public enum Skie_DispatcherDelegate {
      public typealias __Kotlin = spaydkmp.Skie_DispatcherDelegate
    }
    public enum Skie_SuspendHandler {
      public typealias __Kotlin = spaydkmp.Skie_SuspendHandler
    }
    public enum Skie_SuspendResult {
      public typealias __Kotlin = spaydkmp.Skie_SuspendResult
      public enum Success {
        public typealias __Kotlin = spaydkmp.Skie_SuspendResult.Success
      }
      public enum Error {
        public typealias __Kotlin = spaydkmp.Skie_SuspendResult.Error
      }
      public enum Canceled {
        public typealias __Kotlin = spaydkmp.Skie_SuspendResult.Canceled
      }
    }
  }
  public typealias co_touchlab_skie__runtime_kotlin = spaydkmp.Skie.RuntimeKotlin
  public enum KotlinxCoroutinesCore {
    public enum Flow {
      public typealias __Kotlin = spaydkmp.Kotlinx_coroutines_coreFlow
    }
    public enum StateFlow {
      public typealias __Kotlin = spaydkmp.Kotlinx_coroutines_coreStateFlow
    }
    public enum SharedFlow {
      public typealias __Kotlin = spaydkmp.Kotlinx_coroutines_coreSharedFlow
    }
    public enum MutableSharedFlow {
      public typealias __Kotlin = spaydkmp.Kotlinx_coroutines_coreMutableSharedFlow
    }
    public enum MutableStateFlow {
      public typealias __Kotlin = spaydkmp.Kotlinx_coroutines_coreMutableStateFlow
    }
    public enum Runnable {
      public typealias __Kotlin = spaydkmp.Kotlinx_coroutines_coreRunnable
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_coroutines_core = spaydkmp.Skie.KotlinxCoroutinesCore
  public enum KotlinxDatetime {
    public enum DateTimeFormat {
    }
    public enum DateTimeFormatBuilder {
      public enum WithDate {
      }
      public enum WithDateTime {
      }
      public enum WithTime {
      }
      public enum WithDateTimeComponents {
      }
      public enum WithUtcOffset {
      }
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_datetime = spaydkmp.Skie.KotlinxDatetime
  public enum KotlinxSerializationCore {
    public enum SerialKind {
    }
    public enum SerializersModule {
    }
    public enum PolymorphicKind {
    }
    public enum PrimitiveKind {
    }
    public enum StructureKind {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_core = spaydkmp.Skie.KotlinxSerializationCore
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func next() async -> T?
  #endif
  @objc deinit
  public typealias Element = T
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
#if $PrimaryAssociatedTypes2
public protocol SkieSwiftFlowProtocol<Element> : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : spaydkmp.Kotlinx_coroutines_coreFlow
}
#else
public protocol SkieSwiftFlowProtocol : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : spaydkmp.Kotlinx_coroutines_coreFlow
}
#endif
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : spaydkmp.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> spaydkmp.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> spaydkmp.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = spaydkmp.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = spaydkmp.SkieKotlinFlow<Swift.AnyObject>
  public typealias Delegate = any spaydkmp.Kotlinx_coroutines_coreFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : spaydkmp.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> spaydkmp.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> spaydkmp.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = spaydkmp.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = spaydkmp.SkieKotlinOptionalFlow<Swift.AnyObject>
  public typealias Delegate = any spaydkmp.Kotlinx_coroutines_coreFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : spaydkmp.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> spaydkmp.SkieKotlinSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> spaydkmp.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = spaydkmp.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = spaydkmp.SkieKotlinSharedFlow<Swift.AnyObject>
  public typealias Delegate = any spaydkmp.Kotlinx_coroutines_coreSharedFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : spaydkmp.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> spaydkmp.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> spaydkmp.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = spaydkmp.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = spaydkmp.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  public typealias Delegate = any spaydkmp.Kotlinx_coroutines_coreSharedFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : spaydkmp.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: spaydkmp.SkieSwiftStateFlow<spaydkmp.KotlinInt> {
    get
  }
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> spaydkmp.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> spaydkmp.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = spaydkmp.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = spaydkmp.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any spaydkmp.Kotlinx_coroutines_coreMutableSharedFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : spaydkmp.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: spaydkmp.SkieSwiftStateFlow<spaydkmp.KotlinInt> {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> spaydkmp.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> spaydkmp.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = spaydkmp.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = spaydkmp.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any spaydkmp.Kotlinx_coroutines_coreMutableSharedFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : spaydkmp.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
  }
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinStateFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinStateFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> spaydkmp.SkieKotlinStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> spaydkmp.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = spaydkmp.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = spaydkmp.SkieKotlinStateFlow<Swift.AnyObject>
  public typealias Delegate = any spaydkmp.Kotlinx_coroutines_coreStateFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : spaydkmp.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> spaydkmp.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> spaydkmp.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = spaydkmp.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = spaydkmp.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  public typealias Delegate = any spaydkmp.Kotlinx_coroutines_coreStateFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : spaydkmp.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
    set(value)
  }
  final public var replayCache: [T] {
    get
  }
  final public var subscriptionCount: spaydkmp.SkieSwiftStateFlow<spaydkmp.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> spaydkmp.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> spaydkmp.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = spaydkmp.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = spaydkmp.SkieKotlinMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any spaydkmp.Kotlinx_coroutines_coreMutableStateFlow
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : spaydkmp.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
    set(value)
  }
  final public var replayCache: [T?] {
    get
  }
  final public var subscriptionCount: spaydkmp.SkieSwiftStateFlow<spaydkmp.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout spaydkmp.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> spaydkmp.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> spaydkmp.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = spaydkmp.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = spaydkmp.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any spaydkmp.Kotlinx_coroutines_coreMutableStateFlow
  @objc deinit
}
#endif
extension spaydkmp.Skie.RuntimeKotlin.SkieColdFlowIterator {
  public struct __Suspend<E> where E : AnyObject {
    public let __kotlinObject: spaydkmp.SkieColdFlowIterator<E>
    public init(_ __kotlinObject: spaydkmp.SkieColdFlowIterator<E>)
  }
}
public func skie<E>(_ kotlinObject: spaydkmp.SkieColdFlowIterator<E>) -> spaydkmp.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend<E> where E : AnyObject
extension spaydkmp.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasNext() async throws -> spaydkmp.KotlinBoolean
  #endif
}
extension spaydkmp.Kotlinx_coroutines_coreFlow {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any spaydkmp.Kotlinx_coroutines_coreFlowCollector) async throws
  #endif
}
extension spaydkmp.Kotlinx_coroutines_coreFlowCollector {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: spaydkmp.SkieSwiftFlow<T>) -> spaydkmp.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: spaydkmp.SkieSwiftSharedFlow<T>) -> spaydkmp.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: spaydkmp.SkieSwiftFlow<T>) -> spaydkmp.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: spaydkmp.SkieSwiftSharedFlow<T>) -> spaydkmp.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: spaydkmp.SkieKotlinFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: spaydkmp.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: spaydkmp.SkieKotlinFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: spaydkmp.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: spaydkmp.SkieSwiftSharedFlow<T>) -> spaydkmp.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: spaydkmp.SkieSwiftSharedFlow<T>) -> spaydkmp.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: spaydkmp.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: spaydkmp.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: spaydkmp.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: spaydkmp.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>) -> spaydkmp.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>) -> spaydkmp.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: spaydkmp.SkieSwiftStateFlow<T>) -> spaydkmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>) -> spaydkmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: spaydkmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>) -> spaydkmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension spaydkmp.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: spaydkmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: spaydkmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: spaydkmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
@frozen public enum Key : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case date
  case currency
  case amount
  case account
  case alternateAccounts
  case senderReference
  case recipientName
  case paymentType
  case message
  case notifyType
  case notifyAddress
  case `repeat`
  case variableSymbol
  case specificSymbol
  case constantSymbol
  case identifier
  case url
  public var key: Swift.String {
    get
  }
  public var maxLength: spaydkmp.KotlinInt? {
    get
  }
  public var maxValue: spaydkmp.KotlinDouble? {
    get
  }
  public var minLength: spaydkmp.KotlinInt? {
    get
  }
  public var minValue: spaydkmp.KotlinDouble? {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var type: any spaydkmp.KotlinKClass {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.__Key, result: inout spaydkmp.Key?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.__Key, result: inout spaydkmp.Key?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.__Key?) -> spaydkmp.Key
  public func _bridgeToObjectiveC() -> spaydkmp.__Key
  public typealias _ObjectiveCType = spaydkmp.__Key
  public static func == (a: spaydkmp.Key, b: spaydkmp.Key) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [spaydkmp.Key]
  public static var allCases: [spaydkmp.Key] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension spaydkmp.Key {
  public func toKotlinEnum() -> spaydkmp.__Key
}
extension spaydkmp.__Key {
  public func toSwiftEnum() -> spaydkmp.Key
}
@frozen public enum NotificationType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case email
  case phone
  public var key: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.__NotificationType, result: inout spaydkmp.NotificationType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.__NotificationType, result: inout spaydkmp.NotificationType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.__NotificationType?) -> spaydkmp.NotificationType
  public func _bridgeToObjectiveC() -> spaydkmp.__NotificationType
  public typealias _ObjectiveCType = spaydkmp.__NotificationType
  public static func == (a: spaydkmp.NotificationType, b: spaydkmp.NotificationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [spaydkmp.NotificationType]
  public static var allCases: [spaydkmp.NotificationType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension spaydkmp.NotificationType {
  public func toKotlinEnum() -> spaydkmp.__NotificationType
}
extension spaydkmp.__NotificationType {
  public func toSwiftEnum() -> spaydkmp.NotificationType
}
@frozen public enum Kotlinx_datetimeMonth : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case january
  case february
  case march
  case april
  case may
  case june
  case july
  case august
  case september
  case october
  case november
  case december
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.__Kotlinx_datetimeMonth, result: inout spaydkmp.Kotlinx_datetimeMonth?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.__Kotlinx_datetimeMonth, result: inout spaydkmp.Kotlinx_datetimeMonth?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.__Kotlinx_datetimeMonth?) -> spaydkmp.Kotlinx_datetimeMonth
  public func _bridgeToObjectiveC() -> spaydkmp.__Kotlinx_datetimeMonth
  public typealias _ObjectiveCType = spaydkmp.__Kotlinx_datetimeMonth
  public static func == (a: spaydkmp.Kotlinx_datetimeMonth, b: spaydkmp.Kotlinx_datetimeMonth) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [spaydkmp.Kotlinx_datetimeMonth]
  public static var allCases: [spaydkmp.Kotlinx_datetimeMonth] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension spaydkmp.Kotlinx_datetimeMonth {
  public func toKotlinEnum() -> spaydkmp.__Kotlinx_datetimeMonth
}
extension spaydkmp.__Kotlinx_datetimeMonth {
  public func toSwiftEnum() -> spaydkmp.Kotlinx_datetimeMonth
}
@frozen public enum Kotlinx_datetimeDayOfWeek : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case monday
  case tuesday
  case wednesday
  case thursday
  case friday
  case saturday
  case sunday
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.__Kotlinx_datetimeDayOfWeek, result: inout spaydkmp.Kotlinx_datetimeDayOfWeek?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.__Kotlinx_datetimeDayOfWeek, result: inout spaydkmp.Kotlinx_datetimeDayOfWeek?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.__Kotlinx_datetimeDayOfWeek?) -> spaydkmp.Kotlinx_datetimeDayOfWeek
  public func _bridgeToObjectiveC() -> spaydkmp.__Kotlinx_datetimeDayOfWeek
  public typealias _ObjectiveCType = spaydkmp.__Kotlinx_datetimeDayOfWeek
  public static func == (a: spaydkmp.Kotlinx_datetimeDayOfWeek, b: spaydkmp.Kotlinx_datetimeDayOfWeek) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [spaydkmp.Kotlinx_datetimeDayOfWeek]
  public static var allCases: [spaydkmp.Kotlinx_datetimeDayOfWeek] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension spaydkmp.Kotlinx_datetimeDayOfWeek {
  public func toKotlinEnum() -> spaydkmp.__Kotlinx_datetimeDayOfWeek
}
extension spaydkmp.__Kotlinx_datetimeDayOfWeek {
  public func toSwiftEnum() -> spaydkmp.Kotlinx_datetimeDayOfWeek
}
@frozen public enum Kotlinx_datetimePadding : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case none
  case zero
  case space
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: spaydkmp.__Kotlinx_datetimePadding, result: inout spaydkmp.Kotlinx_datetimePadding?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: spaydkmp.__Kotlinx_datetimePadding, result: inout spaydkmp.Kotlinx_datetimePadding?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: spaydkmp.__Kotlinx_datetimePadding?) -> spaydkmp.Kotlinx_datetimePadding
  public func _bridgeToObjectiveC() -> spaydkmp.__Kotlinx_datetimePadding
  public typealias _ObjectiveCType = spaydkmp.__Kotlinx_datetimePadding
  public static func == (a: spaydkmp.Kotlinx_datetimePadding, b: spaydkmp.Kotlinx_datetimePadding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [spaydkmp.Kotlinx_datetimePadding]
  public static var allCases: [spaydkmp.Kotlinx_datetimePadding] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension spaydkmp.Kotlinx_datetimePadding {
  public func toKotlinEnum() -> spaydkmp.__Kotlinx_datetimePadding
}
extension spaydkmp.__Kotlinx_datetimePadding {
  public func toSwiftEnum() -> spaydkmp.Kotlinx_datetimePadding
}
extension spaydkmp.Skie.RuntimeKotlin.Skie_SuspendResult {
  @frozen public enum __Sealed : Swift.Hashable {
    case canceled(spaydkmp.Skie_SuspendResult.Canceled)
    case error(spaydkmp.Skie_SuspendResult.Error)
    case success(spaydkmp.Skie_SuspendResult.Success)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: spaydkmp.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed, b: spaydkmp.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed where __Sealed : spaydkmp.Skie_SuspendResult
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed? where __Sealed : spaydkmp.Skie_SuspendResult
extension spaydkmp.Skie.KotlinxDatetime.DateTimeFormat {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: spaydkmp.Skie.KotlinxDatetime.DateTimeFormat.__Sealed, b: spaydkmp.Skie.KotlinxDatetime.DateTimeFormat.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormat.__Sealed where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormat
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormat.__Sealed? where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormat
extension spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder {
  @frozen public enum __Sealed {
    case withDate(any spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDate)
    case withTime(any spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithTime)
    case withUtcOffset(any spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithUtcOffset)
    case `else`
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.__Sealed where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilder
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.__Sealed? where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilder
extension spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDate {
  @frozen public enum __Sealed {
    case withDateTime(any spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDateTime)
    case `else`
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDate.__Sealed where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDate
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDate.__Sealed? where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDate
extension spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTime {
  @frozen public enum __Sealed {
    case withDateTimeComponents(any spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDateTimeComponents)
    case `else`
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTime.__Sealed where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDateTime
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTime.__Sealed? where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDateTime
extension spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithTime {
  @frozen public enum __Sealed {
    case withDateTime(any spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDateTime)
    case `else`
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithTime.__Sealed where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithTime
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithTime.__Sealed? where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithTime
extension spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents.__Sealed, b: spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents.__Sealed where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDateTimeComponents
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents.__Sealed? where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDateTimeComponents
extension spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithUtcOffset {
  @frozen public enum __Sealed {
    case withDateTimeComponents(any spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithDateTimeComponents)
    case `else`
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithUtcOffset.__Sealed where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithUtcOffset
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithUtcOffset.__Sealed? where __Sealed : spaydkmp.Kotlinx_datetimeDateTimeFormatBuilderWithUtcOffset
extension spaydkmp.Skie.KotlinxSerializationCore.SerialKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case polymorphicKind(spaydkmp.Kotlinx_serialization_corePolymorphicKind)
    case primitiveKind(spaydkmp.Kotlinx_serialization_corePrimitiveKind)
    case cONTEXTUAL(spaydkmp.Kotlinx_serialization_coreSerialKind.CONTEXTUAL)
    case eNUM(spaydkmp.Kotlinx_serialization_coreSerialKind.ENUM)
    case structureKind(spaydkmp.Kotlinx_serialization_coreStructureKind)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: spaydkmp.Skie.KotlinxSerializationCore.SerialKind.__Sealed, b: spaydkmp.Skie.KotlinxSerializationCore.SerialKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxSerializationCore.SerialKind.__Sealed where __Sealed : spaydkmp.Kotlinx_serialization_coreSerialKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxSerializationCore.SerialKind.__Sealed? where __Sealed : spaydkmp.Kotlinx_serialization_coreSerialKind
extension spaydkmp.Skie.KotlinxSerializationCore.SerializersModule {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: spaydkmp.Skie.KotlinxSerializationCore.SerializersModule.__Sealed, b: spaydkmp.Skie.KotlinxSerializationCore.SerializersModule.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxSerializationCore.SerializersModule.__Sealed where __Sealed : spaydkmp.Kotlinx_serialization_coreSerializersModule
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxSerializationCore.SerializersModule.__Sealed? where __Sealed : spaydkmp.Kotlinx_serialization_coreSerializersModule
extension spaydkmp.Skie.KotlinxSerializationCore.PolymorphicKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case oPEN(spaydkmp.Kotlinx_serialization_corePolymorphicKind.OPEN)
    case sEALED(spaydkmp.Kotlinx_serialization_corePolymorphicKind.SEALED)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: spaydkmp.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed, b: spaydkmp.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed where __Sealed : spaydkmp.Kotlinx_serialization_corePolymorphicKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed? where __Sealed : spaydkmp.Kotlinx_serialization_corePolymorphicKind
extension spaydkmp.Skie.KotlinxSerializationCore.PrimitiveKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case bOOLEAN(spaydkmp.Kotlinx_serialization_corePrimitiveKind.BOOLEAN)
    case bYTE(spaydkmp.Kotlinx_serialization_corePrimitiveKind.BYTE)
    case cHAR(spaydkmp.Kotlinx_serialization_corePrimitiveKind.CHAR)
    case dOUBLE(spaydkmp.Kotlinx_serialization_corePrimitiveKind.DOUBLE)
    case fLOAT(spaydkmp.Kotlinx_serialization_corePrimitiveKind.FLOAT)
    case iNT(spaydkmp.Kotlinx_serialization_corePrimitiveKind.INT)
    case lONG(spaydkmp.Kotlinx_serialization_corePrimitiveKind.LONG)
    case sHORT(spaydkmp.Kotlinx_serialization_corePrimitiveKind.SHORT)
    case sTRING(spaydkmp.Kotlinx_serialization_corePrimitiveKind.STRING)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: spaydkmp.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed, b: spaydkmp.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed where __Sealed : spaydkmp.Kotlinx_serialization_corePrimitiveKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed? where __Sealed : spaydkmp.Kotlinx_serialization_corePrimitiveKind
extension spaydkmp.Skie.KotlinxSerializationCore.StructureKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case cLASS(spaydkmp.Kotlinx_serialization_coreStructureKind.CLASS)
    case lIST(spaydkmp.Kotlinx_serialization_coreStructureKind.LIST)
    case mAP(spaydkmp.Kotlinx_serialization_coreStructureKind.MAP)
    case oBJECT(spaydkmp.Kotlinx_serialization_coreStructureKind.OBJECT)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: spaydkmp.Skie.KotlinxSerializationCore.StructureKind.__Sealed, b: spaydkmp.Skie.KotlinxSerializationCore.StructureKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> spaydkmp.Skie.KotlinxSerializationCore.StructureKind.__Sealed where __Sealed : spaydkmp.Kotlinx_serialization_coreStructureKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> spaydkmp.Skie.KotlinxSerializationCore.StructureKind.__Sealed? where __Sealed : spaydkmp.Kotlinx_serialization_coreStructureKind
extension spaydkmp.Key : Swift.Sendable {}
extension spaydkmp.NotificationType : Swift.Sendable {}
extension spaydkmp.Kotlinx_datetimeMonth : Swift.Sendable {}
extension spaydkmp.Kotlinx_datetimeDayOfWeek : Swift.Sendable {}
extension spaydkmp.Kotlinx_datetimePadding : Swift.Sendable {}
extension spaydkmp.Skie.KotlinxDatetime.DateTimeFormat.__Sealed : Swift.Sendable {}
extension spaydkmp.Skie.KotlinxDatetime.DateTimeFormatBuilder.WithDateTimeComponents.__Sealed : Swift.Sendable {}
extension spaydkmp.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.Sendable {}
